from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import datetime
import json
from app import sql
import connect
import string
import random
from cryptography.fernet import Fernet
import hashlib
import base64


bot = Bot(token=connect.API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


password = b'Password'                              # –ü–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
hashed_password = hashlib.sha256(password).digest() # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –æ—Ç –ø–∞—Ä–æ–ª—è
key = base64.urlsafe_b64encode(hashed_password)     # –ü—Ä–∏–≤–æ–¥–∏–º —Ö–µ—à –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
cipher_suite = Fernet(key)                          # –°–æ–∑–¥–∞–µ–º —à–∏—Ñ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞



def encrypt_dict_values(d): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–æ–≤–∞—Ä—è
    for key, value in d.items():
        if isinstance(value, dict):
            encrypt_dict_values(value)
        elif isinstance(value, str):
            d[key] = cipher_suite.encrypt(value.encode()).decode()

def decrypt_dict_values(d): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–æ–≤–∞—Ä—è
    for key, value in d.items():
        if isinstance(value, dict):
            decrypt_dict_values(value)
        elif isinstance(value, str):
            d[key] = cipher_suite.decrypt(value.encode()).decode()


sql.create_table() # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """  –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π.
    
    :param user_id: Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param data_reg: –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :rtype: str
    """
    user_id = message.from_user.id
    user = sql.get_user(user_id)
    keyboard = InlineKeyboardMarkup()

    if not user:
        data_reg = datetime.datetime.now().strftime("%d.%m.%Y")
        sql.add_user(user_id, 'pos', data_reg)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sql.update_user_pos(user_id, 'start')   # –§–∏–∫—Å–∞—Ü–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        text = "<b>üîê BotGenPass</b> \n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! \n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–≤–æ–π <b>–ø–µ—Ä–≤—ã–π –ø–∞—Ä–æ–ª—å</b> –∫–ª–∏–∫–Ω—É–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. "
        keyboard.add(InlineKeyboardButton(
            text="ü™Ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—è", callback_data="generate_password"))
        await message.reply(text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
    else:
        text, keyboard = profile(user_id)
        await message.answer(text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


def profile(user_id):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ –µ–≥–æ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è.

    :param user_id (int): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param tuple: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ None.
    """
    user = sql.get_user(user_id)
    if user:
        last_password_info = json.loads(user[4]) if user[4] else {}  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∞—Ä–æ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        decrypt_dict_values(last_password_info)                      # –î–µ—à–∏—Ñ—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è

        text = (f"<b>üîê BotGenPass</b>\n"
                f"\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–π <b>–∑–∞—â–∏—â—ë–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π.</b>"
                f"\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å: <code>{last_password_info.get('pass', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}</code>"
                f"\n<b>–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> {last_password_info.get('date', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
                )

        buttons = [
            types.InlineKeyboardButton(
                '–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å', callback_data='generate_password'),
            types.InlineKeyboardButton(
                '–ú–æ–∏ –ø–∞—Ä–æ–ª–∏', callback_data='my_password')
        ]
        keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
        keyboard_markup.add(*buttons)
        return text, keyboard_markup
    else:
        return None


def my_password(user_id):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∞—Ä–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä–æ–ª–µ–π.

    :param user_id (int): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param tuple: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–æ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = sql.get_user(user_id)
    if not user:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∞—Ä–æ–ª–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    last_password_info = json.loads(user[4])
    history_password = json.loads(user[5])

    # –î–µ—à–∏—Ñ—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä–æ–ª–µ–π
    decrypt_dict_values(last_password_info)
    for password_info in history_password:
        decrypt_dict_values(password_info)

    last_password_text = (f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å: ‚Ü©Ô∏è</b>\n"
                          f"<b>–î–∞—Ç–∞:</b> {last_password_info.get('date', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                          f"<b>–ü–∞—Ä–æ–ª—å:</b> <code>{last_password_info.get('pass', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}</code>"
                          )
    
    history_password_text = "üìë –ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä–æ–ª–µ–π:\n\n"
    for password_info in history_password:
        history_password_text += (f"–ü–∞—Ä–æ–ª—å: <code>{password_info.get('pass', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}</code>\n"
                                  f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {password_info.get('date', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
                                  )

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = last_password_text + "\n\n" + history_password_text

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("ü™Ñ –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="generate_password"))
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile"))
    return text, keyboard


def generate_random_password(length=12):
    """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.

    :param length (int): –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 12.
    :param str: –°–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.
    """
    allowed_characters = string.ascii_letters + string.digits + "!@#$%^&*_"       # –ù–∞–±–æ—Ä –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–∞—Ä–æ–ª—è
    password = ''.join(random.choice(allowed_characters) for _ in range(length))  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π —Å–∏–º–≤–æ–ª–æ–≤
    return password


@dp.callback_query_handler()
async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
    user_id = query.from_user.id

    if query.data == 'generate_password':       
        sql.update_user_pos(user_id, 'generate_password')                     # –§–∏–∫—Å–∞—Ü–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        generated_password = generate_random_password(random.randint(8, 14))  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
        password_info = {"tag": "BotGenPas", "date": datetime.datetime.now().strftime("%d.%m.%Y"), "pass": generated_password}
       
        encrypt_dict_values(password_info)                              # –®–∏—Ñ—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ª–µ—Ç—É
        sql.update_last_password(user_id, json.dumps(password_info))    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sql.add_password_to_history(user_id, password_info)             # –î–æ–±–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        back_button = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='profile')
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        keyboard_markup.add(back_button)
        await query.message.edit_text(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: <code>{generated_password}</code>", reply_markup=keyboard_markup, parse_mode="HTML")

    if query.data == 'profile':
        sql.update_user_pos(user_id, 'profile') # –§–∏–∫—Å–∞—Ü–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text, keyboard = profile(user_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    if query.data == 'my_password':
        sql.update_user_pos(user_id, 'my_password') # –§–∏–∫—Å–∞—Ü–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text, keyboard = my_password(user_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)



print("BotGenPas: Start polling")
if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling())
    loop.run_forever()
